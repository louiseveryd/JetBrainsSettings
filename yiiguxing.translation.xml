<application>
  <component name="AppStorage">
    <histories>
      <item value="Must be called before any instantiation of application beans." />
      <item value="Instantiate and register all BeanPostProcessor beans, respecting explicit order if given." />
      <item value="Instantiate" />
      <item value="Instantiate and register all BeanPostProcessor beans, respecting explicit order if given. &lt;p&gt;Must be called before any instantiation of application beans." />
      <item value="processors" />
      <item value="intercept" />
      <item value="regardless" />
      <item value="values" />
      <item value="ordering" />
      <item value="priority" />
      <item value="and the rest." />
      <item value="rest" />
      <item value="precision" />
      <item value="Property" />
      <item value="Conditional On Property" />
      <item value="post Process After Initialization" />
      <item value="subsequently" />
      <item value="&amp;mdash;" />
      <item value="Interface to be implemented by beans that need to react once all their properties have been set by a {@link BeanFactory}: e.g. to perform custom initialization, or merely to check that all mandatory properties have been set." />
      <item value="Factory hook that allows for custom modification of new bean instances &amp;mdash; for example, checking for marker interfaces or wrapping beans with proxies." />
      <item value="or merely to check that all mandatory properties have been set." />
      <item value="react" />
      <item value="Query Real Name By App Name And Proj Id" />
      <item value="add Not Reserve Ips Annotation" />
      <item value="add Reserve Ips Annotation" />
      <item value="is Whitespace" />
      <item value="after Properties Set" />
      <item value="Constructor" />
      <item value="image" />
      <item value="register Resolvable Dependency" />
      <item value="Configure the bean factory with context callbacks." />
      <item value="Ignore the given dependency interface for autowiring. &lt;p&gt;This will typically be used by application contexts to register dependencies that are resolved in other ways, like BeanFactory through BeanFactoryAware or ApplicationContext through ApplicationContextAware. &lt;p&gt;By default, only the BeanFactoryAware interface is ignored. For further types to ignore, invoke this method for each type. @param ifc the dependency interface to ignore" />
      <item value="context" />
      <item value="Beans Exception" />
      <item value="Protected method invoked when this task transitions to state {@code isDone} (whether normally or via cancellation). The default implementation does nothing. Subclasses may override this method to invoke completion callbacks or perform bookkeeping. Note that you can query status inside the implementation of this method to determine whether this task has been cancelled." />
      <item value="Suppose you have a set of solvers for a certain problem, each returning a value of some type {@code Result}, and would like to run them concurrently, processing the results of each of them that return a non-null value, in some method {@code use(Result r)}. You could write this as:" />
      <item value="A {@link CompletionService} that uses a supplied {@link Executor} to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using {@code take}. The class is lightweight enough to be suitable for transient use when processing groups of tasks." />
      <item value="Completion Service" />
      <item value="Role hint indicating that a {@code BeanDefinition} is providing an entirely background role and has no relevance to the end-user. This hint is used when registering beans that are completely part of the internal workings of a {@link org.springframework.beans.factory.parsing.ComponentDefinition}." />
      <item value="Role hint indicating that a {@code BeanDefinition} is a supporting part of some larger configuration, typically an outer {@link org.springframework.beans.factory.parsing.ComponentDefinition}. {@code SUPPORT} beans are considered important enough to be aware of when looking more closely at a particular {@link org.springframework.beans.factory.parsing.ComponentDefinition}, but not when looking at the overall configuration of an application." />
      <item value="Role hint indicating that a {@code BeanDefinition} is a supporting part of some larger configuration, typically an outer {@link org.springframework.beans.factory.parsing.ComponentDefinition}. {@code SUPPORT} beans are considered important enough to be aware of when looking more closely at a particular" />
      <item value="corresponds" />
      <item value="If Role is present on a {@link Configuration @Configuration} class, this indicates the role of the configuration class bean definition and does not cascade to all @{@code Bean} methods defined within. This behavior is different than that of the @{@link Lazy} annotation, for example." />
      <item value="If this annotation is not present on a Component or Bean definition, the default value of {@link BeanDefinitionROLE_APPLICATION} will apply." />
      <item value="May be used on any class directly or indirectly annotated with {@link org.springframework.stereotype.Component} or on methods annotated with {@link Bean}." />
      <item value="Indicates the 'role' hint for a given bean." />
      <item value="Role hint indicating that a {@code BeanDefinition} is a major part of the application. Typically corresponds to a user-defined bean." />
      <item value="Allow a subclass to provide custom initialization of the reader, then proceed with actually loading the bean definitions." />
      <item value="Configure the bean definition reader with this context's resource loading environment." />
      <item value="Create a new XmlBeanDefinitionReader for the given BeanFactory." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2360" />
        <entry key="ENGLISH" value="2361" />
        <entry key="ESTONIAN" value="2" />
        <entry key="POLISH" value="4" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="6" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="4" />
        <entry key="FINNISH" value="5" />
        <entry key="DUTCH" value="2" />
        <entry key="CATALAN" value="4" />
        <entry key="CZECH" value="5" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="HAWAIIAN" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="12" />
        <entry key="INDONESIAN" value="3" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1617672818454" />
  </component>
</application>