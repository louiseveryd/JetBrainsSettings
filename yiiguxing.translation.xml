<application>
  <component name="AppStorage">
    <histories>
      <item value="Method that will return a valid String representation of the container value, if the node is a value node (method {@link isValueNode} returns true), otherwise empty String." />
      <item value="RUNNING" />
      <item value="11100000000000000000000000000000" />
      <item value="11111111111111111111111111111" />
      <item value="wc" />
      <item value="rs" />
      <item value="javaagent" />
      <item value="Jet Brains" />
      <item value="core Pool Size" />
      <item value="command" />
      <item value="true" />
      <item value="return" />
      <item value="CAPACITY" />
      <item value="TERMINATED" />
      <item value="TIDYING" />
      <item value="STOP" />
      <item value="SHUTDOWN" />
      <item value="Programs" />
      <item value="java" />
      <item value="Java" />
      <item value="agent" />
      <item value="visualvm" />
      <item value="Tracks largest attained pool size. Accessed only under mainLock." />
      <item value="Set containing all worker threads in pool. Accessed only when holding mainLock." />
      <item value="because the queue may become empty after non-empty and vice versa during SHUTDOWN state, but we can only terminate if, after seeing that it is empty, we see that workerCount is 0 (which sometimes entails a recheck -- see below)." />
      <item value="straightforward" />
      <item value="Detecting the transition from SHUTDOWN to TIDYING is less straightforward than you'd like because the queue may become empty after non-empty and vice versa during SHUTDOWN state, but we can only terminate if, after seeing that it is empty, we see that workerCount is 0 (which sometimes entails a recheck -- see below" />
      <item value="Threads waiting in awaitTermination() will return when the state reaches TERMINATED." />
      <item value="SHUTDOWN -&gt; TIDYING When both queue and pool are empty" />
      <item value="On invocation of shutdown(), perhaps implicitly in finalize() (RUNNING or SHUTDOWN) -&gt; STOP On invocation of shutdownNow()" />
      <item value="On invocation of shutdown(), perhaps implicitly in finalize() (RUNNING or SHUTDOWN) -&gt; STOP" />
      <item value="invocation" />
      <item value="transitions" />
      <item value="The numerical order among these values matters, to allow ordered comparisons. The runState monotonically increases over time, but need not hit each state." />
      <item value="matters" />
      <item value="The numerical order among these values matters, to allow ordered comparisons. The runState monotonically increases over time, but need not hit each state" />
      <item value="Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and throwing an {@code IllegalStateException} if no space is currently available. When using a capacity-restricted queue, it is generally preferable to use {@link offer(Object) offer}." />
      <item value="poll" />
      <item value="Reentrant" />
      <item value="transitioning" />
      <item value="conceptual" />
      <item value="The main pool control state, ctl, is an atomic integer packing two conceptual fields workerCount, indicating the effective number of threads runState, indicating whether running, shutting down etc" />
      <item value="entry into" />
      <item value="because existing ones died since last checking" />
      <item value="The call to addWorker atomically checks runState and workerCount, and so prevents false alarms that would add threads when it shouldn't, by returning false." />
      <item value="Indicates that the same instance of the annotated {@link ChannelHandler} can be added to one or more {@link ChannelPipeline}s multiple times without a race condition. &lt;p&gt; If this annotation is not specified, you have to create a new handler instance every time you add it to a pipeline because it has unshared state such as member variables. &lt;p&gt; This annotation is provided for documentation purpose, just like &lt;a href=&quot;http:www.javaconcurrencyinpractice.comannotationsdoc&quot;&gt;the JCIP annotations&lt;a&gt;." />
      <item value="explicit" />
      <item value="&gt;If you are using an optimizing VM, you may find that ComparableTimSort offers no performance benefit over TimSort in conjunction with a comparator that simply returns {@code ((Comparable)first).compareTo(Second)}. If this is the case, you are better off deleting ComparableTimSort to eliminate the code duplication. (See Arrays.java for details.)" />
      <item value="This is a near duplicate of {@link TimSort}, modified for use with arrays of objects that implement {@link Comparable}, instead of using explicit comparators." />
      <item value="Old merge sort implementation can be selected (for compatibility with broken comparators) using a system property. Cannot be a static boolean in the enclosing class due to circular dependencies. To be removed in a future release." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1750" />
        <entry key="ENGLISH" value="1747" />
        <entry key="POLISH" value="4" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="5" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="2" />
        <entry key="FINNISH" value="4" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="10" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1612142241580" />
  </component>
  <component name="Settings">
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6ee9f602675977e8" />
      </youdao-translate>
    </option>
  </component>
</application>