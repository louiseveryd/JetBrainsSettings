<application>
  <component name="AppStorage">
    <histories>
      <item value="Even if" />
      <item value="Eager" />
      <item value="Base class for {@link org.springframework.context.ApplicationContext} implementations which are supposed to support multiple calls to {@link refresh()}, creating a new internal bean factory instance every time. Typically (but not necessarily), such a context will be driven by a set of config locations to load bean definitions from. &lt;p&gt;The only method to be implemented by subclasses is {@link loadBeanDefinitions}, which gets invoked on each refresh. A concrete implementation is supposed to load bean definitions into the given {@link org.springframework.beans.factory.support.DefaultListableBeanFactory}, typically delegating to one or more specific bean definition readers. &lt;p&gt;&lt;b&gt;Note that there is a similar base class for WebApplicationContexts.&lt;b&gt; {@link org.springframework.web.context.support.AbstractRefreshableWebApplicationContext} provides the same subclassing strategy, but additionally pre-implements all context functionality for web environments. There is also a pre-defined way to receive config locations for a web context. &lt;p&gt;Concrete standalone subclasses of this base class, reading in a specific bean definition format, are {@link ClassPathXmlApplicationContext} and {@link FileSystemXmlApplicationContext}, which both derive from the common {@link AbstractXmlApplicationContext} base class; {@link org.springframework.context.annotation.AnnotationConfigApplicationContext} supports {@code @Configuration}-annotated classes as a source of bean definitions." />
      <item value="App Template" />
      <item value="configure Headless Property" />
      <item value="deduce" />
      <item value="Priority" />
      <item value="Extension of the {@link Ordered} interface, expressing a &lt;em&gt;priority&lt;em&gt; ordering: order values expressed by {@code PriorityOrdered} objects always apply before same order values expressed by &lt;em&gt;plain&lt;em&gt; {@link Ordered} objects. &lt;p&gt;This is primarily a special-purpose interface, used for objects where it is particularly important to recognize &lt;em&gt;prioritized&lt;em&gt; objects first, without even obtaining the remaining objects. A typical example: prioritized post-processors in a Spring {@link org.springframework.context.ApplicationContext}." />
      <item value="Override" />
      <item value="remove" />
      <item value="overview" />
      <item value="JSON Object" />
      <item value="deploy Config" />
      <item value="add Reserve Ips Annotation" />
      <item value="main" />
      <item value="annotation" />
      <item value="check Annotation" />
      <item value="application Api" />
      <item value="add Not Reserve Ips Annotation" />
      <item value="null" />
      <item value="Context" />
      <item value="Http Servlet" />
      <item value="request" />
      <item value="get Relative Path" />
      <item value="path" />
      <item value="true" />
      <item value="resource" />
      <item value="requested" />
      <item value="Servlet Config" />
      <item value="init" />
      <item value="initialization" />
      <item value="action" />
      <item value="client" />
      <item value="empty" />
      <item value="dependency" />
      <item value="Externalized" />
      <item value="registration" />
      <item value="mercyblitz" />
      <item value="Array List" />
      <item value="headers" />
      <item value="add All" />
      <item value="delete By Primary Key" />
      <item value="prepare Method Overrides" />
      <item value="bean Name" />
      <item value="A marker superinterface indicating that a bean is eligible to be notified by the Spring container of a particular framework object through a callback-style method. The actual method signature is determined by individual subinterfaces but should typically consist of just one void-returning method that accepts a single argument." />
      <item value="Note that merely implementing {@link Aware} provides no default functionality. Rather, processing must be done explicitly, for example in a {@link org.springframework.beans.factory.config.BeanPostProcessor}. Refer to {@link org.springframework.context.support.ApplicationContextAwareProcessor} for an example of processing specific {@code Aware} interface callbacks." />
      <item value="is eligible to be notified" />
      <item value="eligible" />
      <item value="A marker superinterface indicating that a bean is eligible to be notified by the Spring container of a particular framework object through a callback-style method. The actual method signature is determined by individual subinterfaces but should typically consist of just one void-returning method that accepts a single argument. &lt;p&gt;Note that merely implementing {@link Aware} provides no default functionality. Rather, processing must be done explicitly, for example in a {@link org.springframework.beans.factory.config.BeanPostProcessor}. Refer to {@link org.springframework.context.support.ApplicationContextAwareProcessor} for an example of processing specific {@code Aware} interface callbacks." />
      <item value="merely" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2265" />
        <entry key="ENGLISH" value="2266" />
        <entry key="POLISH" value="4" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="6" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="4" />
        <entry key="FINNISH" value="5" />
        <entry key="DUTCH" value="2" />
        <entry key="CATALAN" value="4" />
        <entry key="CZECH" value="5" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="HAWAIIAN" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="12" />
        <entry key="INDONESIAN" value="3" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1617672818454" />
  </component>
</application>