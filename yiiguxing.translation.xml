<application>
  <component name="AppStorage">
    <histories>
      <item value="public" />
      <item value="copy Of" />
      <item value="new Length" />
      <item value="minimum" />
      <item value="capacity" />
      <item value="ensure" />
      <item value="Collection" />
      <item value="Null Pointer Exception" />
      <item value="list" />
      <item value="Constructs" />
      <item value="Arrays" />
      <item value="element Data" />
      <item value="List" />
      <item value="Array List" />
      <item value="collection" />
      <item value="specified" />
      <item value="inflate" />
      <item value="asymptotically" />
      <item value="fuzzy" />
      <item value="quadratic" />
      <item value="manipulating" />
      <item value="alter" />
      <item value="algorithms" />
      <item value="semantics" />
      <item value="Marker" />
      <item value="overflow-conscious" />
      <item value="conscious" />
      <item value="cursor" />
      <item value="harmless race" />
      <item value="race" />
      <item value="spin" />
      <item value="negative" />
      <item value="interface" />
      <item value="allow Eager Init" />
      <item value="Interface that encapsulates event publication functionality. * Serves as super-interface for {@link ApplicationContext}." />
      <item value="Cron Task" />
      <item value="Cron" />
      <item value="provider" />
      <item value="invoker" />
      <item value="Glue" />
      <item value="Disposable" />
      <item value="XO Rs" />
      <item value="Stripped-down version of helper class used in previous version, * declared for the sake of serialization compatibility" />
      <item value="Stripped-down" />
      <item value="Inflater" />
      <item value="compatibility" />
      <item value="segments" />
      <item value="intrinsics" />
      <item value="The table is lazily initialized to a power-of-two size upon the * first insertion. Each bin in the table normally contains a * list of Nodes (most often, the list has only zero or one Node). * Table accesses require volatile/atomic reads, writes, and * CASes. Because there is no other way to arrange this without * adding further indirections, we use intrinsics * (sun.misc.Unsafe) operations." />
      <item value="This map usually acts as a binned (bucketed) hash table. Each * key-value mapping is held in a Node. Most nodes are instances * of the basic Node class with hash, key, value, and next * fields. However, various subclasses exist: TreeNodes are * arranged in balanced trees, not lists. TreeBins hold the roots * of sets of TreeNodes. ForwardingNodes are placed at the heads * of bins during resizing. ReservationNodes are used as * placeholders while establishing values in computeIfAbsent and * related methods. The types TreeBin, ForwardingNode, and * ReservationNode do not hold normal user keys, values, or * hashes, and are readily distinguishable during search etc * because they have negative hash fields and null key and value * fields. (These special nodes are either uncommon or transient, * so the impact of carrying around some unused fields is * insignificant.)" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="578" />
        <entry key="ENGLISH" value="579" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="214c2df8ff58c021" />
      </youdao-translate>
    </option>
  </component>
</application>