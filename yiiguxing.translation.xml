<application>
  <component name="AppStorage">
    <histories>
      <item value="unsigned" />
      <item value="Binary" />
      <item value="Arthur van Hoff" />
      <item value="Michael McCloskey" />
      <item value="Martin Buchholz" />
      <item value="Serializable" />
      <item value="Bit Set" />
      <item value="Cloneable" />
      <item value="accommodated" />
      <item value="expand To" />
      <item value="initially" />
      <item value="inclusive" />
      <item value="Optional" />
      <item value="Sequential" />
      <item value="Parallel" />
      <item value="argument" />
      <item value="the previous value associated with the specified key, or * {@code null} if there was no mapping for the key. * (A {@code null} return can also indicate that the map * previously associated {@code null} with the key, * if the implementation supports null values.)" />
      <item value="Absent" />
      <item value="hardcoded" />
      <item value="stereotype" />
      <item value="caffeine" />
      <item value="Present" />
      <item value="Handle" />
      <item value="frequently" />
      <item value="instance" />
      <item value="Atomic" />
      <item value="a side-effect-free function of two arguments" />
      <item value="Eventually" />
      <item value="iterator" />
      <item value="sequence" />
      <item value="Node" />
      <item value="capacity" />
      <item value="this" />
      <item value="drain To" />
      <item value="public" />
      <item value="serial Version UID" />
      <item value="omitted" />
      <item value="fluent" />
      <item value="io" />
      <item value="get Entry" />
      <item value="completion" />
      <item value="pertaining" />
      <item value="unascribed" />
      <item value="Expunge a stale entry by rehashing any possibly colliding entries * lying between staleSlot and the next null slot. This also expunges * any other stale entries encountered before the trailing null. See * Knuth, Section 6.4" />
      <item value="Removes the current thread's value for this thread-local * variable. If this thread-local variable is subsequently * {@linkplain #get read} by the current thread, its value will be * reinitialized by invoking its {@link #initialValue} method, * unless its value is {@linkplain #set set} by the current thread * in the interim. This may result in multiple invocations of the * {@code initialValue} method in the current thread." />
      <item value="Version of getEntry method for use when key is not found in * its direct hash slot." />
      <item value="ThreadLocal values pertaining to this thread. This map is maintained * by the ThreadLocal class." />
      <item value="the" />
      <item value="reflectively" />
      <item value="Synchronous" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="999" />
        <entry key="ENGLISH" value="983" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="2" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="3" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="3" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6ee9f602675977e8" />
      </youdao-translate>
    </option>
  </component>
</application>