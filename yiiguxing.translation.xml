<application>
  <component name="AppStorage">
    <histories>
      <item value="system Simulate" />
      <item value="immutable" />
      <item value="fill" />
      <item value="collection" />
      <item value="Stripped-down version of helper class used in previous version, * declared for the sake of serialization compatibility" />
      <item value="Stripped" />
      <item value="record" />
      <item value="a class-level annotation is nevertheless necessary to trigger method validation * for a specific bean to begin with. Can also be used as a meta-annotation on a * custom stereotype annotation or a custom group-specific validated annotation. *" />
      <item value="nevertheless" />
      <item value="a class-level annotation is nevertheless necessary to trigger method validation * for a specific bean to begin with. Can also be used as a meta-annotation on a * custom stereotype annotation or a custom group-specific validated annotation." />
      <item value="category" />
      <item value="If timely * disposal of file system resources is required, the try-with-resources * construct should be used to ensure that the stream's * {@link Stream#close close} method is invoked after the stream operations * are completed." />
      <item value="Returns an equivalent stream with an additional close handler. Close * handlers are run when the {@link #close()} method * is called on the stream, and are executed in the order they were * added. All close handlers are run, even if earlier close handlers throw * exceptions. If any close handler throws an exception, the first * exception thrown will be relayed to the caller of {@code close()}, with * any remaining exceptions added to that exception as suppressed exceptions * (unless one of the remaining exceptions is the same exception as the * first exception, since an exception cannot suppress itself.) May * return itself. * * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate * operation&lt;/a&gt;. * * @param closeHandler A task to execute when the stream is closed * @return a stream with a handler that is run if the stream is closed" />
      <item value="as" />
      <item value="Retrieves" />
      <item value="poll" />
      <item value="alternative" />
      <item value="lexer" />
      <item value="Mutex" />
      <item value="omit" />
      <item value="facilitate" />
      <item value="concurrent" />
      <item value="since" />
      <item value="elements" />
      <item value="type" />
      <item value="dq String Start" />
      <item value="Transport specifies the mechanism by which individual // HTTP requests are made. // If nil, DefaultTransport is used." />
      <item value="struct" />
      <item value="Immutable" />
      <item value="A negative or zero duration causes Sleep to return immediately." />
      <item value="A package-local class holding common representation and mechanics * for classes supporting dynamic striping on 64bit values. The class * extends Number so that concrete subclasses must publicly do so. */" />
      <item value="consumption" />
      <item value="multiplier" />
      <item value="interoperability" />
      <item value="Banner" />
      <item value="istinguishes this * constructor from other int, float constructor." />
      <item value="dummy" />
      <item value="ignored (distinguishes this * constructor from other int, float constructor.)" />
      <item value="mechanism" />
      <item value="General purpose factory loading mechanism for internal use within the framework." />
      <item value="traversals" />
      <item value="Sequential" />
      <item value="Parallel" />
      <item value="Indicates that this collector is &lt;em&gt;concurrent&lt;/em&gt;, meaning that * the result container can support the accumulator function being * called concurrently with the same result container from multiple * threads." />
      <item value="Indicates that this collector is &lt;em&gt;concurrent&lt;/em&gt;, meaning that * the result container can support the accumulator function being * called concurrently with the same result container from multiple * threads. * * &lt;p&gt;If a {@code CONCURRENT} collector is not also {@code UNORDERED}, * then it should only be evaluated concurrently if applied to an * unordered data source." />
      <item value="Indicates that the collection operation does not commit to preserving * the encounter order of input elements. (This might be true if the * result container has no intrinsic order, such as a {@link Set}.)" />
      <item value="Indicates that the finisher function is the identity function and * can be elided. If set, it must be the case that an unchecked cast * from A to R will succeed." />
      <item value="Decimal" />
      <item value="transient" />
      <item value="enqueue" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="937" />
        <entry key="ENGLISH" value="924" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="2" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="3" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6ee9f602675977e8" />
      </youdao-translate>
    </option>
  </component>
</application>