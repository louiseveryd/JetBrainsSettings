<application>
  <component name="AppStorage">
    <histories>
      <item value="appropriate" />
      <item value="&lt;p&gt; It is rarely appropriate to use this method. It may be useful * for debugging or testing purposes, where it may help to reproduce * bugs due to race conditions. It may also be useful when designing * concurrency control constructs such as the ones in the * {@link java.util.concurrent.locks} package." />
      <item value="Yield is a heuristic attempt to improve relative progression * between threads that would otherwise over-utilise a CPU. Its use * should be combined with detailed profiling and benchmarking to * ensure that it actually has the desired effect." />
      <item value="A hint to the scheduler that the current thread is willing to yield * its current use of a processor. The scheduler is free to ignore this * hint." />
      <item value="temporarily" />
      <item value="Thread Group" />
      <item value="rejected" />
      <item value="Tests if some Thread has been interrupted. The interrupted state * is reset or not based on the value of ClearInterrupted that is * passed." />
      <item value="Removes and signals all waiting threads, invokes done(), and * nulls out callable." />
      <item value="The run state of this task, initially NEW. The run state * transitions to a terminal state only in methods set, * setException, and cancel. During completion, state may take on * transient values of COMPLETING (while outcome is being set) or * INTERRUPTING (only while interrupting the runner to satisfy a * cancel(true)). Transitions from these intermediate to final * states use cheaper ordered/lazy writes because values are unique * and cannot be further modified." />
      <item value="state" />
      <item value="queue" />
      <item value="INTERRUPTED" />
      <item value="INTERRUPTING" />
      <item value="CANCELLED" />
      <item value="EXCEPTIONAL" />
      <item value="NORMAL" />
      <item value="COMPLETING" />
      <item value="typically" />
      <item value="exit" />
      <item value="method" />
      <item value="extends" />
      <item value="Node" />
      <item value="Tree Bin" />
      <item value="semantics" />
      <item value="describe Constable" />
      <item value="string with indentation adjusted and line endings normalized" />
      <item value="strip" />
      <item value="concatenation" />
      <item value="Specification" />
      <item value="&lt;p&gt; Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor * or method in this class will cause a {@link NullPointerException} to be * thrown" />
      <item value="conversions" />
      <item value="The Java language provides special support for the string * concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of * other objects to strings" />
      <item value="concat" />
      <item value="The class {@code String} includes methods for examining * individual characters of the sequence, for comparing strings, for * searching strings, for extracting substrings, and for creating a * copy of a string with all characters translated to uppercase or to * lowercase. Case mapping is based on the Unicode Standard version * specified by the {@link java.lang.Character Character} class. * &lt;p&gt;" />
      <item value="&lt;p&gt; * The class {@code String} includes methods for examining * individual characters of the sequence, for comparing strings, for * searching strings, for extracting substrings, and for creating a * copy of a string with all characters translated to uppercase or to * lowercase. Case mapping is based on the Unicode Standard version * specified by the {@link java.lang.Character Character} class. * &lt;p&gt;" />
      <item value="individual" />
      <item value="examining" />
      <item value="equivalent" />
      <item value="immutable" />
      <item value="mutable" />
      <item value="constant" />
      <item value="The {@code String} class represents character strings. All * string literals in Java programs, such as {@code &quot;abc&quot;}, are * implemented as instances of this class. * &lt;p&gt;" />
      <item value="string" />
      <item value="literals" />
      <item value="bulk" />
      <item value="Hot Spot" />
      <item value="Candidate" />
      <item value="Intrinsic" />
      <item value="mechanics" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="814" />
        <entry key="ENGLISH" value="805" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="2" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6ee9f602675977e8" />
      </youdao-translate>
    </option>
  </component>
</application>