<application>
  <component name="AppStorage">
    <histories>
      <item value="after Properties Set" />
      <item value="in favor of" />
      <item value="Autowire" />
      <item value="Capable" />
      <item value="freeze Configuration" />
      <item value="weird" />
      <item value="Web Logic" />
      <item value="startup Date" />
      <item value="current Time Millis" />
      <item value="prepare Refresh" />
      <item value="page" />
      <item value="JSON Object" />
      <item value="Http Status" />
      <item value="just" />
      <item value="Mono" />
      <item value="null" />
      <item value="target Type" />
      <item value="Instantiate all remaining (non-lazy-init) singletons." />
      <item value="remaining" />
      <item value="register Listeners" />
      <item value="SERVLET INDICATOR CLASSES" />
      <item value="REACTIVE" />
      <item value="multicaster" />
      <item value="context" />
      <item value="intercept" />
      <item value="internal" />
      <item value="Bean Factory Post Processor" />
      <item value="adapting" />
      <item value="Unsupported Operation Exception" />
      <item value="failure" />
      <item value="reform" />
      <item value="transfer" />
      <item value="transfer Reserved Response" />
      <item value="PRECEDENCE" />
      <item value="Beans Exception" />
      <item value="throws" />
      <item value="precedence" />
      <item value="HIGHEST PRECEDENCE" />
      <item value="subsequent" />
      <item value="Apply this {@code BeanPostProcessor} to the given new bean instance &lt;i&gt;before&lt;i&gt; any bean initialization callbacks (like InitializingBean's {@code afterPropertiesSet} or a custom init-method). The bean will already be populated with property values. The returned bean instance may be a wrapper around the original. &lt;p&gt;The default implementation returns the given {@code bean} as-is. @param bean the new bean instance @param beanName the name of the bean @return the bean instance to use, either the original or a wrapped one; if {@code null}, no subsequent BeanPostProcessors will be invoked @throws org.springframework.beans.BeansException in case of errors @see org.springframework.beans.factory.InitializingBeanafterPropertiesSet" />
      <item value="contrast" />
      <item value="semantics" />
      <item value="&lt;h3&gt;Registration&lt;h3&gt; &lt;p&gt;An {@code ApplicationContext} can autodetect {@code BeanPostProcessor} beans in its bean definitions and apply those post-processors to any beans subsequently created. A plain {@code BeanFactory} allows for programmatic registration of post-processors, applying them to all beans created through the bean factory." />
      <item value="Registration" />
      <item value="Typically, post-processors that populate beans via marker interfaces or the like will implement {@link postProcessBeforeInitialization}, while post-processors that wrap beans with proxies will normally implement {@link postProcessAfterInitialization}." />
      <item value="populate" />
      <item value="Factory hook that allows for custom modification of new bean instances &amp;mdash; for example, checking for marker interfaces or wrapping beans with proxies." />
      <item value="Re-register post-processor for detecting inner beans as ApplicationListeners, moving it to the end of the processor chain (for picking up proxies etc)." />
      <item value="Separate" />
      <item value="Register BeanPostProcessorChecker that logs an info message when a bean is created during BeanPostProcessor instantiation, i.e. when a bean is not eligible for getting processed by all BeanPostProcessors." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2418" />
        <entry key="ENGLISH" value="2419" />
        <entry key="ESTONIAN" value="2" />
        <entry key="POLISH" value="4" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="6" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="4" />
        <entry key="FINNISH" value="5" />
        <entry key="DUTCH" value="2" />
        <entry key="CATALAN" value="4" />
        <entry key="CZECH" value="5" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="HAWAIIAN" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="12" />
        <entry key="INDONESIAN" value="3" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1617672818454" />
  </component>
</application>