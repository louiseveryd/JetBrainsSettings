<application>
  <component name="AppStorage">
    <histories>
      <item value="PROCEDURE" />
      <item value="A {@link ChunkedInput} that fetches data from a file chunk by chunk using NIO {@link FileChannel}." />
      <item value="retain" />
      <item value="read Line" />
      <item value="async" />
      <item value="sync" />
      <item value="Override" />
      <item value="exception Caught" />
      <item value="outbound Handler" />
      <item value="fire" />
      <item value="Channel Inbound Handler" />
      <item value="Internally, a {@link FastThreadLocal} uses a constant index in an array, instead of using hash code and hash table, to look for a variable. Although seemingly very subtle, it yields slight performance advantage over using a hash table, and it is useful when accessed frequently. &lt;p&gt;&lt;p&gt; To take advantage of this thread-local variable, your thread must be a {@link FastThreadLocalThread} or its subtype. By default, all threads created by {@link DefaultThreadFactory} are {@link FastThreadLocalThread} due to this reason. &lt;p&gt;&lt;p&gt; Note that the fast path is only possible on threads that extend {@link FastThreadLocalThread}, because it requires a special field to store the necessary state. An access by any other kind of thread falls back to a regular {@link ThreadLocal}." />
      <item value="A special variant of {@link ThreadLocal} that yields higher access performance when accessed from a {@link FastThreadLocalThread}." />
      <item value="session" />
      <item value="returns" />
      <item value="Default Byte Buf Holder" />
      <item value="sanity" />
      <item value="on-the-fly" />
      <item value="Codec" />
      <item value="Aggregator" />
      <item value="Replaying Decoder" />
      <item value="REPLAY" />
      <item value="Called when the input of the channel was closed which may be because it changed to inactive or because of {@link ChannelInputShutdownEvent}." />
      <item value="Channel Handler Context" />
      <item value="Exception" />
      <item value="Object" />
      <item value="decode Last" />
      <item value="decode" />
      <item value="abstract" />
      <item value="Channel Pipeline" />
      <item value="second" />
      <item value="pipeline" />
      <item value="readable Bytes" />
      <item value="For example here is an implementation which reads all readable bytes from the input {@link ByteBuf} and create a new {@link ByteBuf}." />
      <item value="{@link ChannelInboundHandlerAdapter} which decodes bytes in a stream-like fashion from one {@link ByteBuf} to an other Message type." />
      <item value="discardable" />
      <item value="Http Request Encoder" />
      <item value="Premature" />
      <item value="Premature Channel Closure Exception" />
      <item value="lacks" />
      <item value="management" />
      <item value="state" />
      <item value="additional" />
      <item value="Determines if the class or interface represented by this {@code Class} object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified {@code Class} parameter. It returns {@code true} if so; otherwise it returns {@code false}. If this {@code Class} object represents a primitive type, this method returns {@code true} if the specified {@code Class} parameter is exactly this {@code Class} object; otherwise it returns {@code false}." />
      <item value="Throws MethodArgumentNotValidException if validation fails. @throws HttpMessageNotReadableException if {@link RequestBodyrequired()} is {@code true} and there is no body content or if there is no suitable converter to read the content with." />
      <item value="validation" />
      <item value="Method Argument Not Valid Exception" />
      <item value="A combination of {@link HttpRequestEncoder} and {@link HttpResponseDecoder} which enables easier client side HTTP implementation. {@link HttpClientCodec} provides additional state management for &lt;tt&gt;HEAD&lt;tt&gt; and &lt;tt&gt;CONNECT&lt;tt&gt; requests, which {@link HttpResponseDecoder} lacks. Please refer to {@link HttpResponseDecoder} to learn what additional state management needs to be done for &lt;tt&gt;HEAD&lt;tt&gt; and &lt;tt&gt;CONNECT&lt;tt&gt; and why {@link HttpResponseDecoder} can not handle it by itself." />
      <item value="atomic" />
      <item value="Signals that an unexpected exception has occurred in a static initializer. An &lt;code&gt;ExceptionInInitializerError&lt;code&gt; is thrown to indicate that an exception occurred during evaluation of a static initializer or the initializer for a static variable." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1673" />
        <entry key="ENGLISH" value="1674" />
        <entry key="POLISH" value="3" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="5" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="2" />
        <entry key="FINNISH" value="4" />
        <entry key="DUTCH" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="3" />
        <entry key="HINDI" value="8" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1612142241580" />
  </component>
  <component name="Settings">
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6ee9f602675977e8" />
      </youdao-translate>
    </option>
  </component>
</application>