<application>
  <component name="AppStorage">
    <histories>
      <item value="Subclasses must implement this method to perform the actual configuration load. The method is invoked by {@link refresh()} before any other initialization work. &lt;p&gt;A subclass will either create a new bean factory and hold a reference to it, or return a single BeanFactory instance that it holds. In the latter case, it will usually throw an IllegalStateException if refreshing the context more than once. @throws BeansException if initialization of the bean factory failed @throws IllegalStateException if already initialized and multiple refresh attempts are not supported" />
      <item value="Initialize any placeholder property sources in the context environment." />
      <item value="strict" />
      <item value="JAR URL SEPARATOR" />
      <item value="This method will first search the parent class loader for the resource; if the parent is &lt;tt&gt;null&lt;tt&gt; the path of the class loader built-in to the virtual machine is searched. That failing, this method will invoke {@link findResource(String)} to find the resource." />
      <item value="Finds the resource with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code." />
      <item value="Hierarchical" />
      <item value="apply Bean Post Processors Before Initialization" />
      <item value="bean" />
      <item value="add Reserve Ips Annotation" />
      <item value="kubernetes" />
      <item value="reservation" />
      <item value="Beans Exception" />
      <item value="Populate" />
      <item value="Typical methods for creating and populating external bean instances" />
      <item value="Typical" />
      <item value="demarcation" />
      <item value="manual" />
      <item value="args" />
      <item value="Even if" />
      <item value="Eager" />
      <item value="Base class for {@link org.springframework.context.ApplicationContext} implementations which are supposed to support multiple calls to {@link refresh()}, creating a new internal bean factory instance every time. Typically (but not necessarily), such a context will be driven by a set of config locations to load bean definitions from. &lt;p&gt;The only method to be implemented by subclasses is {@link loadBeanDefinitions}, which gets invoked on each refresh. A concrete implementation is supposed to load bean definitions into the given {@link org.springframework.beans.factory.support.DefaultListableBeanFactory}, typically delegating to one or more specific bean definition readers. &lt;p&gt;&lt;b&gt;Note that there is a similar base class for WebApplicationContexts.&lt;b&gt; {@link org.springframework.web.context.support.AbstractRefreshableWebApplicationContext} provides the same subclassing strategy, but additionally pre-implements all context functionality for web environments. There is also a pre-defined way to receive config locations for a web context. &lt;p&gt;Concrete standalone subclasses of this base class, reading in a specific bean definition format, are {@link ClassPathXmlApplicationContext} and {@link FileSystemXmlApplicationContext}, which both derive from the common {@link AbstractXmlApplicationContext} base class; {@link org.springframework.context.annotation.AnnotationConfigApplicationContext} supports {@code @Configuration}-annotated classes as a source of bean definitions." />
      <item value="App Template" />
      <item value="configure Headless Property" />
      <item value="deduce" />
      <item value="Priority" />
      <item value="Extension of the {@link Ordered} interface, expressing a &lt;em&gt;priority&lt;em&gt; ordering: order values expressed by {@code PriorityOrdered} objects always apply before same order values expressed by &lt;em&gt;plain&lt;em&gt; {@link Ordered} objects. &lt;p&gt;This is primarily a special-purpose interface, used for objects where it is particularly important to recognize &lt;em&gt;prioritized&lt;em&gt; objects first, without even obtaining the remaining objects. A typical example: prioritized post-processors in a Spring {@link org.springframework.context.ApplicationContext}." />
      <item value="Override" />
      <item value="remove" />
      <item value="overview" />
      <item value="JSON Object" />
      <item value="deploy Config" />
      <item value="main" />
      <item value="annotation" />
      <item value="check Annotation" />
      <item value="application Api" />
      <item value="add Not Reserve Ips Annotation" />
      <item value="null" />
      <item value="Context" />
      <item value="Http Servlet" />
      <item value="request" />
      <item value="get Relative Path" />
      <item value="path" />
      <item value="true" />
      <item value="resource" />
      <item value="requested" />
      <item value="Servlet Config" />
      <item value="init" />
      <item value="initialization" />
      <item value="action" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2285" />
        <entry key="ENGLISH" value="2286" />
        <entry key="ESTONIAN" value="2" />
        <entry key="POLISH" value="4" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="6" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="4" />
        <entry key="FINNISH" value="5" />
        <entry key="DUTCH" value="2" />
        <entry key="CATALAN" value="4" />
        <entry key="CZECH" value="5" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="HAWAIIAN" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="12" />
        <entry key="INDONESIAN" value="3" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1617672818454" />
  </component>
</application>