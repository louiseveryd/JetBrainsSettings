<application>
  <component name="AppStorage">
    <histories>
      <item value="precedence" />
      <item value="HIGHEST PRECEDENCE" />
      <item value="subsequent" />
      <item value="Apply this {@code BeanPostProcessor} to the given new bean instance &lt;i&gt;before&lt;i&gt; any bean initialization callbacks (like InitializingBean's {@code afterPropertiesSet} or a custom init-method). The bean will already be populated with property values. The returned bean instance may be a wrapper around the original. &lt;p&gt;The default implementation returns the given {@code bean} as-is. @param bean the new bean instance @param beanName the name of the bean @return the bean instance to use, either the original or a wrapped one; if {@code null}, no subsequent BeanPostProcessors will be invoked @throws org.springframework.beans.BeansException in case of errors @see org.springframework.beans.factory.InitializingBeanafterPropertiesSet" />
      <item value="contrast" />
      <item value="semantics" />
      <item value="&lt;h3&gt;Registration&lt;h3&gt; &lt;p&gt;An {@code ApplicationContext} can autodetect {@code BeanPostProcessor} beans in its bean definitions and apply those post-processors to any beans subsequently created. A plain {@code BeanFactory} allows for programmatic registration of post-processors, applying them to all beans created through the bean factory." />
      <item value="Registration" />
      <item value="Typically, post-processors that populate beans via marker interfaces or the like will implement {@link postProcessBeforeInitialization}, while post-processors that wrap beans with proxies will normally implement {@link postProcessAfterInitialization}." />
      <item value="populate" />
      <item value="Factory hook that allows for custom modification of new bean instances &amp;mdash; for example, checking for marker interfaces or wrapping beans with proxies." />
      <item value="Re-register post-processor for detecting inner beans as ApplicationListeners, moving it to the end of the processor chain (for picking up proxies etc)." />
      <item value="Separate" />
      <item value="Register BeanPostProcessorChecker that logs an info message when a bean is created during BeanPostProcessor instantiation, i.e. when a bean is not eligible for getting processed by all BeanPostProcessors." />
      <item value="Must be called before any instantiation of application beans." />
      <item value="Instantiate and register all BeanPostProcessor beans, respecting explicit order if given." />
      <item value="Instantiate" />
      <item value="Instantiate and register all BeanPostProcessor beans, respecting explicit order if given. &lt;p&gt;Must be called before any instantiation of application beans." />
      <item value="processors" />
      <item value="intercept" />
      <item value="regardless" />
      <item value="values" />
      <item value="ordering" />
      <item value="priority" />
      <item value="and the rest." />
      <item value="rest" />
      <item value="precision" />
      <item value="Property" />
      <item value="Conditional On Property" />
      <item value="post Process After Initialization" />
      <item value="subsequently" />
      <item value="&amp;mdash;" />
      <item value="Interface to be implemented by beans that need to react once all their properties have been set by a {@link BeanFactory}: e.g. to perform custom initialization, or merely to check that all mandatory properties have been set." />
      <item value="or merely to check that all mandatory properties have been set." />
      <item value="react" />
      <item value="Query Real Name By App Name And Proj Id" />
      <item value="add Not Reserve Ips Annotation" />
      <item value="add Reserve Ips Annotation" />
      <item value="is Whitespace" />
      <item value="after Properties Set" />
      <item value="Constructor" />
      <item value="image" />
      <item value="register Resolvable Dependency" />
      <item value="Configure the bean factory with context callbacks." />
      <item value="Ignore the given dependency interface for autowiring. &lt;p&gt;This will typically be used by application contexts to register dependencies that are resolved in other ways, like BeanFactory through BeanFactoryAware or ApplicationContext through ApplicationContextAware. &lt;p&gt;By default, only the BeanFactoryAware interface is ignored. For further types to ignore, invoke this method for each type. @param ifc the dependency interface to ignore" />
      <item value="context" />
      <item value="Beans Exception" />
      <item value="Protected method invoked when this task transitions to state {@code isDone} (whether normally or via cancellation). The default implementation does nothing. Subclasses may override this method to invoke completion callbacks or perform bookkeeping. Note that you can query status inside the implementation of this method to determine whether this task has been cancelled." />
      <item value="Suppose you have a set of solvers for a certain problem, each returning a value of some type {@code Result}, and would like to run them concurrently, processing the results of each of them that return a non-null value, in some method {@code use(Result r)}. You could write this as:" />
      <item value="A {@link CompletionService} that uses a supplied {@link Executor} to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using {@code take}. The class is lightweight enough to be suitable for transient use when processing groups of tasks." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2378" />
        <entry key="ENGLISH" value="2379" />
        <entry key="ESTONIAN" value="2" />
        <entry key="POLISH" value="4" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="6" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="4" />
        <entry key="FINNISH" value="5" />
        <entry key="DUTCH" value="2" />
        <entry key="CATALAN" value="4" />
        <entry key="CZECH" value="5" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="HAWAIIAN" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="12" />
        <entry key="INDONESIAN" value="3" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1617672818454" />
  </component>
</application>