<application>
  <component name="AppStorage">
    <histories>
      <item value="slot" />
      <item value="eldest" />
      <item value="remove" />
      <item value="possibly" />
      <item value="utilities" />
      <item value="internal" />
      <item value="youngest" />
      <item value="tail" />
      <item value="remove Eldest Entry" />
      <item value="consumption" />
      <item value="opportunity" />
      <item value="synchronized" />
      <item value="doubly" />
      <item value="access" />
      <item value="access Order" />
      <item value="threshold" />
      <item value="only If Absent" />
      <item value="put Map Entries" />
      <item value="Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn * extends Node) so can be used as extension of either regular or * linked node." />
      <item value="lincese" />
      <item value="License" />
      <item value="MIN TREEIFY CAPACITY" />
      <item value="Structural" />
      <item value="structurally" />
      <item value="&lt;p&gt;Note that fail-fast behavior cannot be guaranteed as it is, generally * speaking, impossible to make any hard guarantees in the presence of * unsynchronized concurrent modification. Fail-fast operations * throw {@code ConcurrentModificationException} on a best-effort basis. * Therefore, it would be wrong to write a program that depended on this * exception for its correctness: &lt;i&gt;{@code ConcurrentModificationException} * should be used only to detect bugs.&lt;/i&gt;" />
      <item value="Note that this exception does not always indicate that an object has * been concurrently modified by a &lt;i&gt;different&lt;/i&gt; thread. If a single * thread issues a sequence of method invocations that violates the * contract of an object, the object may throw this exception. For * example, if a thread modifies a collection directly while it is * iterating over the collection with a fail-fast iterator, the iterator * will throw this exception." />
      <item value="Iterators that do this are known as &lt;i&gt;fail-fast&lt;/i&gt; iterators, * as they fail quickly and cleanly, rather that risking arbitrary, * non-deterministic behavior at an undetermined time in the future." />
      <item value="undetermined" />
      <item value="non-deterministic" />
      <item value="arbitrary" />
      <item value="cleanly" />
      <item value="quickly" />
      <item value="fail" />
      <item value="are known as" />
      <item value="In general, the results of the * iteration are undefined under these circumstances" />
      <item value="permissible" />
      <item value="private" />
      <item value="long" />
      <item value="final" />
      <item value="static" />
      <item value="Arthur van Hoff" />
      <item value="Doug Lea" />
      <item value="Josh Bloch" />
      <item value="occurrence" />
      <item value="poll" />
      <item value="unbounded" />
      <item value="equivalent" />
      <item value="EXISTS" />
      <item value="timezone" />
      <item value="summary Detail" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="738" />
        <entry key="ENGLISH" value="731" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6ee9f602675977e8" />
      </youdao-translate>
    </option>
  </component>
</application>