<application>
  <component name="AppStorage">
    <histories>
      <item value="assigned" />
      <item value="recurse" />
      <item value="ALIAS ELEMENT" />
      <item value="IMPORT ELEMENT" />
      <item value="node Name Equals" />
      <item value="Bean Definition Parser Delegate" />
      <item value="delegate" />
      <item value="parse Default Element" />
      <item value="The value may indicate a suggestion for a logical component name, to be turned into a Spring bean in case of an autodetected component. @return the suggested component name, if any (or empty String otherwise)" />
      <item value="Implementation Requirements" />
      <item value="@code @AliasFor} is an annotation that is used to declare aliases for annotation attributes." />
      <item value="Any nested &lt;beans&gt; elements will cause recursion in this method. In order to propagate and preserve &lt;beans&gt; default- attributes correctly, keep track of the current (parent) delegate, which may be null. Create the new (child) delegate with a reference to the parent for fallback purposes, then ultimately reset this.delegate back to its original (parent) reference. this behavior emulates a stack of delegates without actually necessitating one." />
      <item value="initializes" />
      <item value="Allow a subclass to provide custom initialization of the reader, then proceed with actually loading the bean definitions." />
      <item value="Load bean definitions into the given bean factory, typically through delegating to one or more bean definition readers." />
      <item value="typically through delegating to one or more bean definition readers." />
      <item value="encountering" />
      <item value="Set whether to allow circular references between beans - and automatically try to resolve them. &lt;p&gt;Note that circular reference resolution means that one of the involved beans will receive a reference to another bean that is not fully initialized yet. This can lead to subtle and not-so-subtle side effects on initialization; it does work fine for many scenarios, though. &lt;p&gt;Default is &quot;true&quot;. Turn this off to throw an exception when encountering a circular reference, disallowing them completely. &lt;p&gt;&lt;b&gt;NOTE:&lt;b&gt; It is generally recommended to not rely on circular references between your beans. Refactor your application logic to have the two beans involved delegate to a third bean that encapsulates their common logic." />
      <item value="but the definition can no longer be found." />
      <item value="no longer" />
      <item value="Thrown if the Java Virtual Machine or a &lt;code&gt;ClassLoader&lt;code&gt; instance tries to load in the definition of a class (as part of a normal method call or as part of creating a new instance using the &lt;code&gt;new&lt;code&gt; expression) and no definition of the class could be found. &lt;p&gt; The searched-for class definition existed when the currently executing class was compiled, but the definition can no longer be found." />
      <item value="retrofitted" />
      <item value="aforementioned" />
      <item value="but no definition for the class with the specified name could be found." />
      <item value="Thrown when an application tries to load in a class through its string name using:" />
      <item value="Illegal State Exception" />
      <item value="Beans Exception" />
      <item value="refresh" />
      <item value="annotations" />
      <item value="after Properties Set" />
      <item value="Override" />
      <item value="Holder for constructor argument values, typically as part of a bean definition." />
      <item value="Holder for constructor argument values, typically as part of a bean definition. &lt;p&gt;Supports values for a specific index in the constructor argument list as well as for generic argument matches by type. @author Juergen Hoeller @since 09.11.2003 @see BeanDefinitiongetConstructorArgumentValues" />
      <item value="Definition" />
      <item value="possible" />
      <item value="creation" />
      <item value="singleton" />
      <item value="avoid" />
      <item value="Populate the bean instance in the given BeanWrapper with the property values from the bean definition." />
      <item value="Populate" />
      <item value="Indicate that the annotated element represents a stereotype for the index." />
      <item value="Scope" />
      <item value="Token Auth Interceptor" />
      <item value="informer" />
      <item value="a callback for creating an instance of the bean" />
      <item value="Mutable Property Values" />
      <item value="Initializing Bean" />
      <item value="in favor of" />
      <item value="Autowire" />
      <item value="Capable" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2490" />
        <entry key="ENGLISH" value="2491" />
        <entry key="ESTONIAN" value="2" />
        <entry key="POLISH" value="4" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="6" />
        <entry key="FRENCH" value="5" />
        <entry key="FILIPINO" value="4" />
        <entry key="FINNISH" value="5" />
        <entry key="DUTCH" value="2" />
        <entry key="CATALAN" value="4" />
        <entry key="CZECH" value="5" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="HAWAIIAN" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="12" />
        <entry key="INDONESIAN" value="3" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1618191369766" />
  </component>
</application>